import Head from "next/head";
import Image from "next/image";
import { useEffect, useMemo, useState } from "react";
import styles from "../styles/Home.module.css";
import { formatDistance } from "date-fns";
import pt from "date-fns/locale/pt-BR";
export default function Home({ g1 }: { g1: any}) {
  const [g1Feed, setG1Feed] = useState([]);
  const [countdown, setCountDown] = useState([]);

  const xmlToJson = (doc: any) => {
    return JSON.parse((window as any).xml2json(doc).replace("undefined", ""));
  };

  useEffect(() => {
    let parser = new DOMParser();
    const g1xmlDoc = parser.parseFromString(g1, "text/xml");
    const g1JsonData = xmlToJson(g1xmlDoc);
    setG1Feed(g1JsonData?.rss?.channel?.item || []);

    const timer = setInterval(() => {
      (window as any).countdown.setLabels(
        " milissegundo| segundo| minuto| hora| dia| semana| mês| ano| década| século| milênio",
        " milissegundos| segundos| minutos| horas| dias| semanas| meses| anos| décadas| séculos| milênios",
        "+",
        "+",
        "agora"
      );
      let countDownData = (window as any)
        .countdown(new Date(2023, 0, 1))
        .toString()
        .split("+")
        .map((item: any) => ({
          value: item.split(" ")[0],
          label: item.split(" ")[1],
        }));
      setCountDown(countDownData);
    }, 1000);

    return () => {
      clearTimeout(timer)
    }
  }, []);

  const handleCountDown = useMemo(() => {
    return (
      <ul>
        {countdown.map((item: any) => (
          <li key={item.label}>
            <h1>{item.value}</h1>
            <p>{item.label}</p>
          </li>
        ))}
      </ul>
    );
  }, [countdown]);

  const handleG1Feed = useMemo(() => {
    return (
      <>
        {g1Feed
          .filter((item) => !!item["media:content"])
          .slice(0, 8)
          .map((item: any) => {
            const mediaContent = item["media:content"];
            const thumb = mediaContent ? mediaContent["@url"] : "";
            return (
              <a href={item.link} key={item.pubDate} className={styles.card} target={'_blank'}>
                <div
                  className={styles.thumb}
                  style={{
                    backgroundImage: `url('${thumb}')`,
                  }}
                ></div>
                <div className={styles.title_wrapper}>
                  <span className={styles.date}>
                    {formatDistance(new Date(), new Date(item.pubDate), {
                      locale: pt,
                    })}
                  </span>
                  <span className={styles.title}>{item.title}</span>
                </div>
              </a>
            );
          })}
      </>
    );
  }, [g1Feed]);

  return (<>
    <div className={styles.header}>
      <Image className={styles.pt} src="/pt.png" alt="PT" width={96} height={92} />
      <Image src="/logo-lula-presidente.png" alt="Lula" width={245} height={79} />
    </div>
    <div className={styles.container}>
      <Head>
        <title>Contagem Regressiva</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <script src="/js/xml2json.js"></script>
        <script src="/js/countdown.min.js"></script>
      </Head>
     
      <main className={styles.main}>
        <h1 className={styles.main_title}>Contagem regressiva!</h1>
        <section className={styles.section}>
          {handleCountDown}
        </section>
        <div className={styles.grid}>{handleG1Feed}</div>
      </main>
    </div>
    </>
  );
}

export async function getStaticProps() {
  const res1 = await fetch("https://g1.globo.com/rss/g1/politica");
  const g1 = await res1.text();
  return { props: { g1 } };
}
